@page "/"
@using BlackWatch.WebApp.Features.Api
@using BlackWatch.WebApp.Services
@inject IApiClient _api
@inject Navigation _navigation

@if (_tallySources == null)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

<h1>Black Watch</h1>

<table class="table table-striped table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Message</th>
        <th>Interval</th>
        <th>Version</th>
        <th>Date Modified</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ts in _tallySources)
    {
        var tallies = _tallies?[ts.Id!].OrderByDescending(t => t.DateCreated);
        <tr>
            <td>@ts.Id</td>
            <td>@ts.Name</td>
            <td>@ts.Message</td>
            <td>@ts.Interval</td>
            <td>@ts.Version</td>
            <td>@ts.DateModified</td>
            <td>
                <a href="/edit/@ts.Id">
                    <span class="oi oi-pencil"></span>
                </a>
                &nbsp;
                <a href="#" @onclick="() => EvaluateAsync(ts)">
                    <span class="oi oi-bolt"></span>
                </a>
            </td>
        </tr>
        @if (tallies == null)
        {
            continue;
        }
        @foreach (var t in tallies)
        {
            <tr class="@GetTallyRowClass(t)">
                <td colspan="2" />
                <td colspan="5">
                    @t.State
                    &nbsp;|&nbsp;
                    @t.Result
                    &nbsp;|&nbsp;
                    @t.DateCreated
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<div class="my-1">
    <button class="btn btn-primary" @onclick="CreateNew">New...</button>
</div>

@code {
    private IReadOnlyCollection<TallySource>? _tallySources;
    private ILookup<string, Tally>? _tallies;

    private static string GetTallyRowClass(Tally tally)
    {
        return tally.State switch
        {
            TallyState.Indeterminate => "table-secondary",
            TallyState.NonSignalled => "",
            TallyState.Signalled => "table-primary",
            TallyState.Error => "table-error",
            _ => throw new ArgumentOutOfRangeException(),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _tallySources = await _api.GetTallySourcesAsync();
        await FetchTalliesAsync();
    }

    private async Task FetchTalliesAsync()
    {
        var tallies = await _api.GetTalliesAsync(3);
        _tallies = tallies.ToLookup(t => t.TallySourceId!);
    }

    private void CreateNew()
    {
        _navigation.NavigateTo("/new");
    }

    private async Task EvaluateAsync(TallySource ts)
    {
        var tally = await _api.EvaluateTallySourceAndStoreTallyAsync(ts.Id!);
        await FetchTalliesAsync();
    }
}