@page "/source/edit/{id}"
@using BlackWatch.WebApp.Features.Api
@using BlackWatch.WebApp.Services
@using Microsoft.Extensions.Logging
@implements IDisposable
@inject IApiClient _api
@inject ILogger<Edit> _logger
@inject NavigationManager _navigation
@inject UiService _ui

@if (_model == null)
{
    <p>Loading TallySource...</p>
    return;
}

<TallySourceEditor Model="@_model"></TallySourceEditor>

<div class="my-1">
    <button class="btn btn-primary" @onclick="SaveAsync">OK</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</div>

@code {
    private TallySource? _model;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _ui.Refresh += UiOnRefresh;

        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        if (Id == null)
        {
            return;
        }

        _model = await _api.GetTallySourceAsync(Id);
    }

    private async Task SaveAsync()
    {
        var command = new PutTallySourceCommand(
            Name: _model!.Name ?? string.Empty,
            Message: _model.Message ?? string.Empty,
            Code: _model.Code ?? string.Empty,
            Interval: _model.Interval);

        var id = _model.Id ?? throw new InvalidOperationException("id must not be null");
        await _api.UpdateTallySourceAsync(id, command);
        GoBack();
    }

    private void Cancel()
    {
        GoBack();
    }

    private void GoBack()
    {
        _navigation.NavigateTo("/source");
    }

    private async void UiOnRefresh(object? sender, EventArgs e)
    {
        await RefreshAsync();

        StateHasChanged();
    }

    public void Dispose()
    {
        _ui.Refresh -= UiOnRefresh;
    }
}