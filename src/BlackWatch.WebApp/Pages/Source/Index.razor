@page "/source"
@using BlackWatch.WebApp.Features.Api
@using BlackWatch.WebApp.Services
@using BlackWatch.WebApp.Util
@using Microsoft.Extensions.Logging
@implements IDisposable
@inject IApiClient _api
@inject NavigationManager _navigation
@inject ILogger<Index> _logger
@inject IJSRuntime _js
@inject UiService _ui

@if (_tallySources == null)
{
    <p>
        <em>Loading...</em>
    </p>
    return;
}

<table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Message</th>
        <th>Interval</th>
        <th>Version</th>
        <th>Date Modified</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ts in _tallySources)
    {
        var tallies = _tallies?[ts.Id!].OrderByDescending(t => t.DateCreated);
        <tr>
            <td>@ts.Id</td>
            <td>@ts.Name</td>
            <td>@ts.Message</td>
            <td>@ts.Interval.Render()</td>
            <td>@ts.Version</td>
            <td>@ts.DateModified.Render()</td>
            <td>
                <a href="" @onclick:preventDefault @onclick="() => EvaluateAsync(ts)" title="Evaluate">
                    <span class="oi oi-bolt"></span>
                </a>
                &nbsp;
                <a href="" @onclick:preventDefault @onclick="() => PurgeAsync(ts)" title="Purge Tallies">
                    <span class="oi oi-fire"></span>
                </a>
                &nbsp;
                <a href="/source/edit/@ts.Id" title="Edit"><span class="oi oi-pencil"></span></a>
                &nbsp;
                <a href="" @onclick:preventDefault @onclick="() => DeleteAsync(ts)" title="Delete">
                    <span class="oi oi-x text-center" style="font-size: 0.9rem"></span>
                </a>
            </td>
        </tr>
        @if (tallies == null)
        {
            continue;
        }
        @foreach (var t in tallies)
        {
            <tr>
                <td colspan="2"/>
                <td colspan="5">
                    <TallyWidget Tally="@t"></TallyWidget>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private IReadOnlyCollection<TallySource>? _tallySources;
    private ILookup<string, Tally>? _tallies;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();

        _ui.Refresh += UiOnRefresh;
    }

    private async void UiOnRefresh(object? sender, EventArgs e)
    {
        _logger.LogInformation("Edit -> UiOnRefresh");
        await RefreshAsync();
        StateHasChanged();
        _logger.LogInformation("Edit <- UiOnRefresh");
    }

    private async Task RefreshAsync()
    {
        _tallySources = await _api.GetTallySourcesAsync();
        await FetchTalliesAsync();
    }

    private async Task FetchTalliesAsync()
    {
        var tallies = await _api.GetTalliesAsync(3);
        _tallies = tallies.ToLookup(t => t.TallySourceId!);
    }

    private async Task EvaluateAsync(TallySource ts)
    {
        var tally = await _api.EvaluateTallySourceAndStoreTallyAsync(ts.Id!);
        _logger.LogInformation("evaluated tally source #{TallySourceId}: {Tally}", ts.Id, tally.ToString());
        await FetchTalliesAsync();
    }

    private async Task DeleteAsync(TallySource ts)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Delete tally source?") == false)
        {
            return;
        }

        await _api.DeleteTallySourceAsync(ts.Id!);
        await RefreshAsync();
    }

    private async Task PurgeAsync(TallySource ts)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Purge tallies?") == false)
        {
            return;
        }

        await _api.PurgeTallies(ts.Id!);
        await FetchTalliesAsync();
    }

    public void Dispose()
    {
        _ui.Refresh -= UiOnRefresh;
    }
}
