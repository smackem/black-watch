@using BlackWatch.WebApp.Features.Api
@using Microsoft.Extensions.Logging
@inject ILogger<TallySourceEditor> _logger;
@inject IApiClient _api;

<form action="#" class="row p-3">
    <div class="col-8">
        <label for="name" class="col-form-label">Name</label>
        <input type="text" id="name" class="form-control" @bind="Model!.Name"/>
    </div>
    <div class="col-4">
        <label for="interval" class="col-form-label">Evaluation Interval</label>
        <select id="interval" class="form-control" @bind="Model!.Interval">
            <option value="Disabled">--</option>
            <option value="OneHour">1 hour</option>
            <option value="SixHours">6 hours</option>
            <option value="OneDay">1 day</option>
        </select>
    </div>
    <div class="col-12">
        <label for="message" class="col-form-label">Message</label>
        <input type="text" id="message" class="form-control" @bind="Model!.Message"/>
    </div>
    <div class="col-12">
        <label for="code" class="col-form-label">
            Code
            <a href="" @onclick="EvaluateAsync" @onclick:preventDefault class="ml-1"><span class="oi oi-bolt"></span></a>
        </label>
        <MonacoEditor @ref="_codeEditor" Id="code"
                      ConstructionOptions="EditorConstructionOptions"
                      OnDidChangeModelContent="EditorModelContentChanged" />
        @if (_tally != null)
        {
            <TallyWidget Model="@_tally" TallySourceName="@_model?.Name" TallySourceMessage="@_model?.Message"></TallyWidget>
        }
    </div>
</form>

@code {
    private MonacoEditor? _codeEditor;
    private TallySource? _model;
    private Tally? _tally;

    [Parameter]
    public TallySource? Model
    {
        get => _model;
        set
        {
            _model = value;
            _tally = null;
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        _logger.LogInformation("EditorConstructionOptions: Code = '{Code}'", _model?.Code);

        // this works around a BlazorMonaco bug with .net 6, that throws an exception when SetValue
        // is called without await
        Task.Run(async () => { await editor.SetValue(_model?.Code ?? string.Empty); });

        return new StandaloneEditorConstructionOptions
        {
            Theme = "vs",
            RenderWhitespace = "all",
            Minimap = new EditorMinimapOptions { Enabled = false },
            Dimension = new Dimension { Height = 400 },
            FontSize = 14,
            AutomaticLayout = true,
            Language = "javascript",
            Value = Model?.Code ?? string.Empty,
            FontLigatures = true,
            FontFamily = "JetBrains Mono, Fira Code, Cascadia Code, Menlo, Consolas, monospace",
        };
    }

    private async void EditorModelContentChanged()
    {
        if (_model != null && _codeEditor != null)
        {
            _model.Code = await _codeEditor.GetValue();
        }
    }

    private async Task EvaluateAsync()
    {
        if (_model == null)
        {
            return;
        }

        _tally = await _api.EvaluateTempTallySourceAsync(new PutTallySourceCommand(
            _model.Name ?? string.Empty,
            _model.Message ?? string.Empty,
            _model.Code ?? string.Empty,
            _model.Interval));
    }
}